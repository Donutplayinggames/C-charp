using System;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using System.Collections.Generic;

public class CPHInline
{
	private static HttpClient client;
	string webhookUrl = "";
	string webhookUsername = ""; // Your discord Botname
	string webhookAvatarUrl = ""; // webhook URL
	string twitchAvatarURL = "https://i.imgur.com/xGoEvn9.png";
	string kickAvatarURL = "https://i.imgur.com/q0Dv9JZ.png";
	string youtubeAvatarURL = "https://i.imgur.com/2FyVpuG.png";
	string basePath = AppDomain.CurrentDomain.BaseDirectory;
	
	public bool Execute()
	{
		CPH.TryGetArg("webhookUrl", out webhookUrl);
		CPH.TryGetArg("__source", out string source);
		
		switch (source)
		{
			case "TwitchChatMessage":
			{
				CPH.TryGetArg("message", out string message);
				CPH.TryGetArg("user", out string user);
				PostTwitchChatMessage(message, user).Wait();
				LogTwitchChatMessage(message, user);
			}
			break;
			
			case "KickChatMessage":
			{
				CPH.TryGetArg("message", out string message);
				CPH.TryGetArg("user", out string user);
				PostKickChatMessage(message, user).Wait();
				LogKickChatMessage(message, user);
			}
			break;
			
			case "YouTubeMessage":
			{
				CPH.TryGetArg("message", out string message);
				CPH.TryGetArg("user", out string user);
				CPH.TryGetArg("userId", out string userId);
				CPH.TryGetArg("userProfileUrl", out string userProfileUrl);
				PostYouTubeMessage(message, user, userId, userProfileUrl).Wait();
				LogYouTubeChatMessage(message, user);
			}
			break;
		}
		
		return true;
	}
	
	private async Task PostTwitchChatMessage(string message, string user)
	{
		string avatarURL = TwitchAvatarURL(user);
		
		var fieldsList = new List<object>()
		{
			new { name = "**User**", value = user, inline = true },
			new { name = "\u200B", value = "\u200B", inline = true },
			new { name = "üí¨ **Platform**", value = "Twitch", inline = true },
			new { name = "üìù **Message**", value = message.Length > 1000 ? message.Substring(0, 997) + "..." : message, inline = false },
			new { name = "üïê **Time**", value = WhenTheThingHappened(), inline = false },
		};

		await SendChatNotification("üí¨ Chat Message", 6570404, user, avatarURL, fieldsList);
	}
	
	private async Task PostKickChatMessage(string message, string user)
	{
		var fieldsList = new List<object>()
		{
			new { name = "**User**", value = user, inline = true },
			new { name = "\u200B", value = "\u200B", inline = true },
			new { name = "üí¨ **Platform**", value = "Kick", inline = true },
			new { name = "üìù **Message**", value = message.Length > 1000 ? message.Substring(0, 997) + "..." : message, inline = false },
			new { name = "üïê **Time**", value = WhenTheThingHappened(), inline = false },
		};

		await SendChatNotification("üí¨ Chat Message", 5763719, user, kickAvatarURL, fieldsList);
	}
	
	private async Task PostYouTubeMessage(string message, string user, string userId, string userProfileUrl)
	{
		var fieldsList = new List<object>()
		{
			new { name = "**User**", value = user, inline = true },
			new { name = "\u200B", value = "\u200B", inline = true },
			new { name = "üí¨ **Platform**", value = "YouTube", inline = true },
			new { name = "üîó **Channel**", value = $"[View Channel](https://www.youtube.com/channel/{userId})", inline = false },
			new { name = "üìù **Message**", value = message.Length > 1000 ? message.Substring(0, 997) + "..." : message, inline = false },
			new { name = "üïê **Time**", value = WhenTheThingHappened(), inline = false },
		};

		await SendChatNotification("üí¨ Chat Message", 16711680, user, userProfileUrl, fieldsList);
	}

	private async Task SendChatNotification(string title, int color, string user, string avatarUrl, List<object> fields)
	{
		if (string.IsNullOrEmpty(webhookUrl))
			return;

		if (client == null)
			client = new HttpClient();

		var embed = new
		{
			title = title,
			color = color,
			thumbnail = new { url = avatarUrl },
			fields = fields.ToArray(),
		};

		var payload = new
		{
			username = webhookUsername,
			avatar_url = webhookAvatarUrl,
			embeds = new[] { embed }
		};

		string jsonPayload = JsonConvert.SerializeObject(payload, new JsonSerializerSettings
		{
			StringEscapeHandling = StringEscapeHandling.Default
		});

		var content = new StringContent(jsonPayload, Encoding.UTF8, "application/json");

		try
		{
			await client.PostAsync(webhookUrl, content);
		}
		catch (Exception ex)
		{
			CPH.LogError($"Discord webhook error: {ex.Message}");
		}
	}
	
	public void LogTwitchChatMessage(string message, string user)
	{
		string today = DateTime.Now.ToString("yyyy-MM-dd");
		string folderPath = $"{basePath}nuttys-fun-tools\\chat-logs";
		string filePath = $"{folderPath}\\{today}.cum";
		
		Directory.CreateDirectory(Path.GetDirectoryName(folderPath));
		
		using (StreamWriter writer = File.AppendText(filePath))
		{
			writer.WriteLine($"{WhenTheThingHappenedButOnlyTheTimeComponentNotTheDate()}  Twitch | {user}: {message}");
		}
	}
	
	public void LogKickChatMessage(string message, string user)
	{
		string today = DateTime.Now.ToString("yyyy-MM-dd");
		string folderPath = $"{basePath}nuttys-fun-tools\\chat-logs";
		string filePath = $"{folderPath}\\{today}.cum";
		
		Directory.CreateDirectory(Path.GetDirectoryName(folderPath));
		
		using (StreamWriter writer = File.AppendText(filePath))
		{
			writer.WriteLine($"{WhenTheThingHappenedButOnlyTheTimeComponentNotTheDate()}    Kick | {user}: {message}");
		}
	}
	
	public void LogYouTubeChatMessage(string message, string user)
	{
		string today = DateTime.Now.ToString("yyyy-MM-dd");
		string folderPath = $"{basePath}nuttys-fun-tools\\chat-logs";
		string filePath = $"{folderPath}\\{today}.cum";
		
		Directory.CreateDirectory(Path.GetDirectoryName(folderPath));
		
		using (StreamWriter writer = File.AppendText(filePath))
		{
			writer.WriteLine($"{WhenTheThingHappenedButOnlyTheTimeComponentNotTheDate()} YouTube | {user}: {message}");
		}
	}
	
	public string WhenTheThingHappened()
	{
		try
		{
			DateTime utcNow = DateTime.UtcNow;
			long unixTimestamp = ((DateTimeOffset)utcNow).ToUnixTimeSeconds();
			return string.Format("<t:{0}:f> (<t:{0}:R>)", unixTimestamp);
		}
		catch
		{
			return $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}]";
		}
	}
	
	public string WhenTheThingHappenedButOnlyTheTimeComponentNotTheDate()
	{
		return $"[{DateTime.Now:HH:mm:ss}]";
	}

	public string TwitchAvatarURL(string user)
	{
		try
		{
			return CPH.TwitchGetExtendedUserInfoByLogin(user).ProfileImageUrl;
		}
		catch
		{
			return twitchAvatarURL;
		}
	}
}
